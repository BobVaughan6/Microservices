# =============================================================================
# Docker Compose 配置文件
# =============================================================================
# 作用：定义和运行多容器 Docker 应用程序的配置文件
# 版本：3.8 是 Docker Compose 的文件格式版本
# 
# Docker Compose 核心概念：
#   1. 服务（Services）：定义应用程序的各个组件（容器）
#   2. 网络（Networks）：定义容器间的通信网络
#   3. 卷（Volumes）：定义数据持久化存储（本配置未使用）
# 
# 使用 Docker Compose 的优势：
#   - 一键启动所有服务：docker-compose up
#   - 统一配置管理：所有服务配置集中在一个文件
#   - 服务编排：自动处理服务间依赖关系
#   - 网络隔离：自动创建独立的网络环境
#   - 环境一致性：开发、测试、生产环境保持一致
# 
# 常用命令：
#   docker-compose up -d        # 后台启动所有服务
#   docker-compose down         # 停止并删除所有服务
#   docker-compose ps           # 查看服务状态
#   docker-compose logs -f      # 查看实时日志
#   docker-compose restart      # 重启所有服务
#   docker-compose build        # 重新构建镜像
# 
# 未来扩展：
#   - 添加数据库服务（PostgreSQL、MongoDB）
#   - 添加缓存服务（Redis）
#   - 添加消息队列（RabbitMQ、Kafka）
#   - 添加监控服务（Prometheus、Grafana）
#   - 添加日志聚合（ELK Stack）
#   - 添加服务发现（Consul）
# =============================================================================

version: '3.8'

# =============================================================================
# 服务定义 (Services)
# =============================================================================
# 每个服务代表一个容器化的微服务实例

services:
  # ---------------------------------------------------------------------------
  # User Service (用户服务)
  # ---------------------------------------------------------------------------
  # 职责：处理用户相关的所有业务逻辑
  # 端口：5001
  user-service:
    # 构建配置：从 Dockerfile 构建镜像
    build:
      context: ./src/UserService/UserService  # 构建上下文路径
      dockerfile: Dockerfile                   # Dockerfile 文件名
    
    # 端口映射：宿主机端口:容器端口
    # 格式："HOST:CONTAINER"
    # 5001:5001 表示将容器的 5001 端口映射到宿主机的 5001 端口
    ports:
      - "5001:5001"
    
    # 环境变量：配置容器运行时的环境
    environment:
      # ASPNETCORE_ENVIRONMENT: 设置 ASP.NET Core 运行环境
      #   - Development: 开发环境，启用详细错误页面、热重载等
      #   - Staging: 预发布环境
      #   - Production: 生产环境，优化性能和安全性
      - ASPNETCORE_ENVIRONMENT=Development
      
      # ASPNETCORE_URLS: 指定应用监听的 URL
      #   - http://+:5001 表示监听所有网络接口的 5001 端口
      #   - + 是通配符，允许从任何 IP 访问
      #   - 如果只写 http://localhost:5001，容器外部无法访问
      - ASPNETCORE_URLS=http://+:5001
    
    # 网络配置：将服务连接到指定的网络
    # 同一网络中的服务可以通过服务名互相访问
    # 例如：user-service 可以通过 http://product-service:5002 访问产品服务
    networks:
      - microservices

  # ---------------------------------------------------------------------------
  # Product Service (产品服务)
  # ---------------------------------------------------------------------------
  # 职责：处理产品相关的所有业务逻辑
  # 端口：5002
  product-service:
    build:
      context: ./src/ProductService/ProductService
      dockerfile: Dockerfile
    
    ports:
      - "5002:5002"
    
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:5002
    
    networks:
      - microservices

  # ---------------------------------------------------------------------------
  # API Gateway (API 网关)
  # ---------------------------------------------------------------------------
  # 职责：作为所有客户端请求的统一入口，路由到后端服务
  # 端口：5000（对外暴露的主端口）
  api-gateway:
    build:
      context: ./src/ApiGateway/ApiGateway
      dockerfile: Dockerfile
    
    ports:
      - "5000:5000"  # 客户端通过此端口访问整个系统
    
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:5000
    
    # depends_on: 定义服务启动依赖关系
    # API Gateway 依赖于 user-service 和 product-service
    # Docker Compose 会先启动依赖的服务，再启动 API Gateway
    # 
    # 注意：depends_on 只保证启动顺序，不保证服务完全就绪
    # 生产环境建议：
    #   - 在 API Gateway 中实现重试逻辑
    #   - 使用健康检查确认服务就绪
    #   - 实现优雅的错误处理
    depends_on:
      - user-service
      - product-service
    
    networks:
      - microservices

# =============================================================================
# 网络定义 (Networks)
# =============================================================================
# 创建自定义网络，实现服务间通信和网络隔离

networks:
  # microservices: 微服务专用网络
  microservices:
    # driver: 网络驱动类型
    # bridge: 桥接网络，Docker 默认驱动
    #   - 适合同一主机上的容器通信
    #   - 每个容器有独立的 IP 地址
    #   - 容器可以通过服务名互相访问（DNS 解析）
    #   - 与主机网络隔离，安全性更好
    # 
    # 其他驱动选项：
    #   - host: 容器直接使用主机网络（性能最好，但失去隔离）
    #   - overlay: 跨主机通信，用于 Docker Swarm
    #   - macvlan: 为容器分配 MAC 地址，像物理设备
    driver: bridge
    
# =============================================================================
# 使用说明
# =============================================================================
# 
# 1. 构建并启动所有服务：
#    docker-compose up --build
#    或后台运行：docker-compose up -d
# 
# 2. 访问服务：
#    - API Gateway: http://localhost:5000
#    - User Service: http://localhost:5001
#    - Product Service: http://localhost:5002
# 
# 3. 查看日志：
#    docker-compose logs -f [service-name]
# 
# 4. 停止所有服务：
#    docker-compose down
# 
# 5. 重启特定服务：
#    docker-compose restart user-service
# 
# 6. 扩展服务实例（需要配置负载均衡）：
#    docker-compose up -d --scale user-service=3
# 
# =============================================================================

