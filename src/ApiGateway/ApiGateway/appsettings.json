{
  // ==========================================================================
  // 应用程序配置文件 (Application Configuration)
  // ==========================================================================
  // 文件名：appsettings.json
  // 作用：存储应用程序的配置参数
  // 
  // ASP.NET Core 配置系统特点：
  //   1. 分层配置：appsettings.json -> appsettings.{Environment}.json -> 环境变量 -> 命令行参数
  //   2. 强类型绑定：可以绑定到 C# 类
  //   3. 配置重载：文件修改后自动重新加载
  //   4. 多种配置源：JSON、XML、INI、环境变量、命令行等
  // 
  // 配置优先级（从低到高）：
  //   1. appsettings.json（通用配置）
  //   2. appsettings.{Environment}.json（环境特定配置）
  //   3. User Secrets（开发环境敏感数据）
  //   4. 环境变量
  //   5. 命令行参数
  // 
  // 未来扩展：
  //   - 添加数据库连接字符串
  //   - 添加服务 URL 配置
  //   - 添加认证配置（JWT、OAuth2）
  //   - 添加缓存配置（Redis）
  //   - 添加消息队列配置
  //   - 添加第三方 API 密钥
  //   - 使用配置中心（Consul、Azure App Configuration）
  // ==========================================================================
  
  // 日志配置 (Logging Configuration)
  "Logging": {
    // 日志级别配置
    // 日志级别从低到高：Trace < Debug < Information < Warning < Error < Critical
    "LogLevel": {
      // Default: 默认日志级别，适用于所有未特别指定的类别
      // Information: 记录一般信息性消息（应用启动、请求处理等）
      // 
      // 建议的日志级别：
      //   - Development: Debug 或 Information
      //   - Staging: Information
      //   - Production: Warning 或 Error
      "Default": "Information",
      
      // Microsoft.AspNetCore: ASP.NET Core 框架的日志级别
      // Warning: 只记录警告和错误，过滤掉冗余的框架信息
      // 
      // 为什么设置为 Warning？
      //   - ASP.NET Core 会产生大量 Information 级别日志
      //   - 在生产环境这些日志通常不重要
      //   - 减少日志量，提高性能
      // 
      // 其他可配置的类别：
      //   - "Microsoft": "Warning"  // 所有微软框架日志
      //   - "Microsoft.EntityFrameworkCore": "Information"  // EF Core 查询日志
      //   - "System": "Warning"  // .NET 系统库日志
      //   - "YourApp.Services": "Debug"  // 自定义应用日志
      "Microsoft.AspNetCore": "Warning"
    }
    
    // 未来可以添加日志提供程序配置：
    // "Console": {  // 控制台日志
    //   "LogLevel": { "Default": "Information" }
    // },
    // "File": {  // 文件日志（需要安装 Serilog 等库）
    //   "Path": "logs/app.log",
    //   "RollingInterval": "Day"
    // },
    // "Elasticsearch": {  // 日志聚合（ELK Stack）
    //   "Uri": "http://elasticsearch:9200"
    // }
  },
  
  // 允许的主机 (Allowed Hosts)
  // 用于主机过滤中间件，防止 Host 头攻击
  // 
  // "*": 允许任何主机名访问（适用于开发和测试）
  // 
  // 生产环境建议：
  //   - 指定具体域名："example.com;www.example.com"
  //   - 使用通配符子域名："*.example.com"
  //   - 在负载均衡器或 API Gateway 层面配置
  // 
  // 安全性说明：
  //   - 防止 DNS 重绑定攻击
  //   - 防止缓存污染
  //   - 应该根据实际部署环境配置
  "AllowedHosts": "*"
  
  // ==========================================================================
  // 自定义配置示例（未来扩展）
  // ==========================================================================
  // 
  // // 数据库连接字符串
  // "ConnectionStrings": {
  //   "DefaultConnection": "Server=localhost;Database=UserDb;User Id=sa;Password=***"
  // },
  // 
  // // 后端服务 URL（API Gateway 使用）
  // "ServiceUrls": {
  //   "UserService": "http://user-service:5001",
  //   "ProductService": "http://product-service:5002"
  // },
  // 
  // // JWT 认证配置
  // "Jwt": {
  //   "SecretKey": "your-secret-key-here",
  //   "Issuer": "your-app",
  //   "Audience": "your-app-users",
  //   "ExpirationMinutes": 60
  // },
  // 
  // // Redis 缓存配置
  // "Redis": {
  //   "ConnectionString": "localhost:6379",
  //   "InstanceName": "UserService"
  // },
  // 
  // // CORS 配置
  // "Cors": {
  //   "AllowedOrigins": ["http://localhost:3000", "https://yourdomain.com"]
  // },
  // 
  // // 限流配置
  // "RateLimit": {
  //   "PermitLimit": 100,
  //   "Window": "00:01:00"
  // }
  // 
  // ==========================================================================
}
